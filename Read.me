# TestApp - React Native Product Browser

A React Native application that displays products from an API with navigation and favorites functionality.

## Features

- Browse products from Fake Store API
- Navigate between product list and product details
- Favorites functionality with persistent storage
- Cross-platform support (iOS & Android)

## Prerequisites

Before you begin, ensure you have met the following requirements:

- **Node.js**: Version 20 or higher (as specified in [package.json](package.json))
- **React Native CLI**: Install globally with `npm install -g @react-native-community/cli`
- **iOS Development** (Mac only):
  - Xcode 12 or later
  - iOS Simulator or physical iOS device
  - CocoaPods
- **Android Development**:
  - Android Studio
  - Android SDK (API level 24 or higher)
  - Android Emulator or physical Android device

## Installation

1. **Clone the repository** (or navigate to project directory):
   ```bash
   cd /Users/anisurrehman/Desktop/TestApp
   ```

2. **Install dependencies**:
   ```bash
   npm install
   ```

3. **iOS Setup** (Mac only):
   ```bash
   # Install Ruby dependencies
   bundle install
   
   # Install iOS dependencies
   cd ios && bundle exec pod install && cd ..
   ```

4. **Android Setup**:
   - Ensure Android Studio is installed and configured
   - Set up Android SDK and emulator

## Running the App

### Start Metro Server

First, start the Metro development server:

```bash
npm start
```

### Run on iOS (Mac only)

In a new terminal window:

```bash
# Using npm
npm run ios

# Or using React Native CLI directly
npx react-native run-ios
```

### Run on Android

In a new terminal window:

```bash
# Using npm
npm run android

# Or using React Native CLI directly
npx react-native run-android
```

## Development Scripts

- `npm start` - Start Metro bundler
- `npm run ios` - Run on iOS simulator/device
- `npm run android` - Run on Android emulator/device
- `npm run lint` - Run ESLint for code linting
- `npm test` - Run Jest tests

## Project Structure

```
src/
├── home.tsx                    # Main product listing screen
└── product-details-screen.tsx  # Product details screen

App.tsx                         # Main app component with navigation setup
index.js                        # App entry point
```

## Key Dependencies

- **React Native**: 0.82.1
- **React Navigation**: Navigation between screens
- **AsyncStorage**: Local storage for favorites
- **TypeScript**: Type safety and development experience

## API Integration

The app fetches product data from the [Fake Store API](https://fakestoreapi.com/):
- Endpoint: `https://fakestoreapi.com/products/1`
- Currently displays a single product (can be extended to show multiple products)

## Features Overview

### Home Screen ([src/home.tsx](src/home.tsx))
- Displays product list with images, titles, and prices
- Search functionality (UI ready)
- Favorites toggle with heart icon
- Navigation to product details

### Product Details Screen ([src/product-details-screen.tsx](src/product-details-screen.tsx))
- Full product information display
- Product image, title, price, category
- Product description and rating

### Navigation
- Stack navigation between Home and ProductDetails screens
- Type-safe navigation with TypeScript

## Troubleshooting

### Common Issues

1. **Metro bundler issues**:
   ```bash
   npx react-native start --reset-cache
   ```

2. **iOS build issues**:
   ```bash
   cd ios && bundle exec pod install && cd ..
   ```

3. **Android build issues**:
   ```bash
   cd android && ./gradlew clean && cd ..
   ```

4. **Node modules issues**:
   ```bash
   rm -rf node_modules && npm install
   ```

### Platform Specific

**iOS**:
- Ensure Xcode Command Line Tools are installed
- Check iOS deployment target (15.1+)
- Verify CocoaPods installation

**Android**:
- Check Android SDK installation
- Verify ANDROID_HOME environment variable
- Ensure emulator is running or device is connected

## Development Notes

- The app uses the new React Native architecture (Fabric enabled)
- Hermes JavaScript engine is enabled for better performance
- TypeScript configuration extends `@react-native/typescript-config`
- ESLint configuration extends `@react-native`

## Next Steps

To extend the application, consider:
1. Fetching multiple products from the API
2. Implementing search functionality
3. Adding product categories
4. Implementing shopping cart features
5. Adding user authentication

## License

This project is for educational/demonstration purposes.